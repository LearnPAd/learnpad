-- @nsURI ADOXX=http://www.ado.org
-- @nsURI XWIKI=http://www.xwiki.org

module ado2xwiki;

create OUT : XWIKI from IN : ADOXX;

-- This helper stores an integer value used to assign an ID to each generated Object
helper def: curObj : Integer = 0;
-- This helper increments the value to be assigned to a generated Object
helper def: incCurObj() : Integer = thisModule.refSetValue('curObj', thisModule.curObj + 1);
-- This helper reset the curObj
helper def: resetCurObj() : OclAny = thisModule.refSetValue('curObj', 0);

helper context String def : name : String = self.substring(self.lastIndexOf('!')+2, self.size());

helper context ADOXX!INSTANCEType def : relatedIncomingConnector : Sequence(ADOXX!COLLECTORType) =
	self.refImmediateComposite().cONNECTOR->select(e | ((e.tO.class = self.class) and (e.tO.instance = self.name))).flatten();
helper context ADOXX!INSTANCEType def : relatedOutgoingConnector : Sequence(ADOXX!COLLECTORType) =
	self.refImmediateComposite().cONNECTOR->select(e | ((e.fROM.class = self.class) and (e.fROM.instance = self.name))).flatten();


--helper def :getInstance(class: String, instance : String):ADOXX!INSTANCEType = ADOXX!INSTANCEType.allInstances()->any(e | e.class=class and e.name=instance);

helper def : instances : Map(OclAny, ADOXX!INSTANCEType) = Map{};
helper def : loadInstances : Map(OclAny, ADOXX!INSTANCEType) =
   ADOXX!INSTANCEType.allInstances()->iterate(e; acc : Map(OclAny, ADOXX!INSTANCEType) = Map{} |
     acc.including(e.refImmediateComposite().name+'-'+e.class+'-'+e.name, e)
   );
helper def :getInstance(model: String, class: String, instance : String):ADOXX!INSTANCEType =
	if (thisModule.instances.get(model+'-'+class+'-'+instance).oclIsUndefined()) then
		OclUndefined.debug('undef: '+model+'-'+class+'-'+instance)
	else
		thisModule.instances.get(model+'-'+class+'-'+instance)
	endif;

helper def :documentRoot : XWIKI!DocumentRoot = OclUndefined;

entrypoint rule RootWebHome() {
	to t: XWIKI!DocumentRoot (),
	-----------------------  Static WebHome  -----------------------
	p: XWIKI!Page (
	   	title <- 'Home',
		parent <- 'Main.WebHome',
		name <- 'WebHome',
		content <- '{{include reference="LPCode.ModelSetWebHome" /}}'
	),
	msc:XWIKI!Object {
		className <- 'LPCode.ModelSetClass',
		property <- Sequence{msc_p1, msc_p2}
	},
	msc_p1:XWIKI!Property {
		name <- 'id',
		type <- 'String',
		value <- s.id
	},
	msc_p1:XWIKI!Property {
		name <- 'name',
		type <- 'String',
		value <- s.name
	}
	do {
		thisModule.documentRoot <- t;
		thisModule.documentRoot.page<-p;
		thisModule.instances <- thisModule.loadInstances;
	}
}

-----------------------  MODELType  -----------------------
rule MODELType2WebHome {
	from s:ADOXX!MODELType(s.modeltype='Business process diagram (BPMN 2.0)')  --actually filter by BusinessProcess
	-----------------------  mod.XXXXX  -----------------------
	to p: XWIKI!Page (
		title <- s.name,
		parent <- 'WebHome',
		name <- s.id
	),
	mc:XWIKI!Object (
		className <- 'LPCode.ModelClass',
		number <- thisModule.curObj,
		pageName <- s.id,
		property <- Sequence{mc_p1, mc_p2, mc_p3}
	),
	mc_p1:XWIKI!Property (
		name <- 'id',
		type <- 'String',
		value <- s.id
	),
	mc_p2:XWIKI!Property (
		name <- 'name',
		type <- 'String',
		value <- s.name
	),
	mc_p3:XWIKI!Property (
		name <- 'type',
		type <- 'StaticList',
		value <- 'bpmn'
	),
	xwiki:XWIKI!Object (
		className <- 'XWiki.DocumentSheetBinding',
		number <- thisModule.curObj,
		pageName <- s.id,
		property <- Sequence{xwiki_p1}
	),
	xwiki_p1:XWIKI!Property (
		name <- 'sheet',
		type <- 'string',
		value <- 'LPCode.ModelSheet'
	)
	do {
		thisModule.documentRoot.page<-p;
	}
}

-----------------------  INSTANCEType  -----------------------
rule INSTANCEType2Page {
	from s:ADOXX!INSTANCEType(s.refImmediateComposite().modeltype='Business process diagram (BPMN 2.0)')  --actually filter by BusinessProcess
	-----------------------  obj.XXXXX  -----------------------
	to t_p: XWIKI!Page (
	   	title <- s.name,
		name <- s.id,
		parent <- s.refImmediateComposite().id, --modelid 
	),
	------------------  objects\LPCode\BaseElementClass  ------------------
	bec:XWIKI!Object (
		className <- 'LPCode.BaseElementClass',
		number <- thisModule.curObj,
		pageName <- s.id,
		property <- Sequence{bec_p0, bec_p1, bec_p2, bec_p3, bec_p4}->asSequence()
	),
	bec_p0:XWIKI!Property (
		name <- 'modelid',
		type <- 'String',
		value <- s.refImmediateComposite().id
	),
	bec_p1:XWIKI!Property (
		name <- 'id',
		type <- 'String',
		value <- s.id
	),
	bec_p2:XWIKI!Property (
		name <- 'name',
		type <- 'String',
		value <- s.name
	),
	bec_p3:XWIKI!Property (
		name <- 'type',
		type <- 'StaticList',
		value <- s.class
	),
	bec_p4:XWIKI!Property (
		name <- 'documentation',
		type <- 'TextArea',
		value <- ''
	),
	----------------  objects\XWiki\DocumentSheetBinding  ----------------
	xwiki:XWIKI!Object (
		className <- 'XWiki.DocumentSheetBinding',
		number <- thisModule.curObj,
		pageName <- s.id,
		property <- Sequence{xwiki_p1}
	),
	xwiki_p1:XWIKI!Property (
		name <- 'sheet',
		type <- 'String',
		value <- 'LPCode.BaseElementSheet'
	)
	do {
		thisModule.documentRoot.page<-t_p;

		-- Relazioni Incoming--
		for (e in s.relatedIncomingConnector) {
			thisModule.CONNECTORType2Page(s, e, 'incoming', thisModule.curObj);
			thisModule.incCurObj();
		}
		-- Relazioni Outgoing--
		for (e in s.relatedOutgoingConnector) {
			thisModule.CONNECTORType2Page(s, e, 'outgoing', thisModule.curObj);
			thisModule.incCurObj();
		}

		--reset the counter
		thisModule.resetCurObj();
	}
}

----------------------  CONNECTORType  ----------------------
rule CONNECTORType2Page(i: ADOXX!INSTANCEType, c:ADOXX!CONNECTORType, type: String, objNo: Integer) {

	----------------  objects\LPCode\LinkClass  ----------------
	to lc:XWIKI!Object (
		className <- 'LPCode.LinkClass',
		number <- objNo,
		pageName <- i.id,
		property <- Sequence{lc_p1, lc_p2, lc_p3}
	),
	lc_p1:XWIKI!Property (
		name <- 'id',
		type <- 'String',
		value <- c.id
	),
	lc_p2:XWIKI!Property (
		name <- 'type',
		type <- 'StaticList',
		value <- type
	),
	lc_p3:XWIKI!Property (
		name <- 'uri',
		type <- 'String',
		value <- if(type='incoming') then
				thisModule.getInstance(c.refImmediateComposite().name, c.fROM.class, c.fROM.instance).id
			else
				thisModule.getInstance(c.refImmediateComposite().name, c.tO.class, c.tO.instance).id
			endif
	)
}
